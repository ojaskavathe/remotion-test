{
  "code": "import React from 'react'; import { AbsoluteFill, interpolate, spring, useCurrentFrame, useVideoConfig, Composition, registerRoot } from 'remotion'; const text = 'POTATO FARMING FOR ENGINEERS'; const words = text.split(' '); const textContainerStyle: React.CSSProperties = { fontFamily: `'Arial Black', 'Gadget', sans-serif`, fontWeight: 'bolder', fontSize: 90, color: 'white', textAlign: 'center', display: 'flex', flexWrap: 'wrap', justifyContent: 'center', alignItems: 'center', gap: '0.4em' }; const letterStyle: React.CSSProperties = { display: 'inline-block' }; export const GeneratedVideo: React.FC = () => { const frame = useCurrentFrame(); const {width, fps} = useVideoConfig(); const animationInDuration = 30; const holdDuration = 30; const animationOutStart = animationInDuration + holdDuration; const animationOutDuration = 30; const totalDuration = animationOutStart + animationOutDuration; const backgroundSlide = interpolate( frame, [0, animationInDuration, animationOutStart, totalDuration], [-width, 0, 0, width], { extrapolateLeft: 'clamp', extrapolateRight: 'clamp' } ); const containerTransformStyle: React.CSSProperties = { transform: `translateX(${backgroundSlide}px)` }; let letterOverallIndex = 0; return ( <AbsoluteFill> <AbsoluteFill style={{ ...containerTransformStyle, backgroundColor: '#8B4513' }} /> <AbsoluteFill style={{ ...containerTransformStyle, display: 'flex', justifyContent: 'center', alignItems: 'center' }}> <div style={textContainerStyle}> {words.map((word, wordIndex) => ( <span key={wordIndex} style={{display: 'flex', whiteSpace: 'pre'}}> {word.split('').map((letter, letterInWordIndex) => { const delay = letterOverallIndex * 1.2; const inSpring = spring({ fps, frame: frame - delay, config: {damping: 200, stiffness: 150}, durationInFrames: 30 }); const inRotation = interpolate(inSpring, [0, 1], [-360, 0]); const inY = interpolate(inSpring, [0, 0.5, 1], [60, -40, 0]); const outSpring = spring({ fps, frame: frame - animationOutStart - delay, config: {damping: 200, stiffness: 150}, durationInFrames: 30 }); const outRotation = interpolate(outSpring, [0, 1], [0, 360]); const outY = interpolate(outSpring, [0, 0.5, 1], [0, -40, 60]); const rotation = frame < animationOutStart ? inRotation : outRotation; const y = frame < animationOutStart ? inY : outY; letterOverallIndex++; return ( <span key={letterInWordIndex} style={{ ...letterStyle, transform: `rotate(${rotation}deg) translateY(${y}px)` }}> {letter} </span> ); })} </span> ))} </div> </AbsoluteFill> </AbsoluteFill> ); }; export const RemotionRoot = () => <Composition id=\"MyComp\" component={GeneratedVideo} durationInFrames={90} fps={30} width={1920} height={1080} />; registerRoot(RemotionRoot);"
} 